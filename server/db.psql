CREATE FUNCTION SET_COMPLETED_SEASON() 
RETURNS TRIGGER AS 
$$
BEGIN
  IF (
      (
        SELECT s.episode_count
        FROM episodes e
        JOIN seasons s
        ON s.series_id = e.series_id
        AND s.season_number = e.season_number
        JOIN series se
        ON se.id = e.series_id
        WHERE e.id = NEW.media_id 
      ) = (
        SELECT COUNT(*)
        FROM history h
        JOIN episodes e
        ON e.id = h.media_id
        JOIN seasons s
        ON s.series_id = e.series_id
        AND s.season_number = e.season_number
        JOIN series se
        ON se.id = e.series_id
        WHERE h.user_id = NEW.user_id
        AND s.title = (
          SELECT s.title
          FROM episodes e
          JOIN seasons s
          ON s.series_id = e.series_id
          AND s.season_number = e.season_number
          WHERE e.id = NEW.media_id
        )
        GROUP BY se.title
      )
  ) THEN 
         INSERT INTO completed_seasons 
         VALUES (NEW.user_id, 
           (SELECT e.series_id 
            FROM episodes e 
            WHERE e.id = NEW.media_id),
           (SELECT s.season_number
            FROM seasons s
            JOIN episodes e
            ON e.season_number = s.season_number
            AND e.series_id = s.series_id
            WHERE e.id = NEW.media_id
           )
         );
  END IF;
RETURN NEW;
END; 
$$ 
LANGUAGE plpgsql;

CREATE FUNCTION DELETE_COMPLETED_SEASON()
RETURNS TRIGGER AS
$$
BEGIN
DELETE FROM completed_seasons cs
        WHERE cs.user_id = OLD.user_id
        AND cs.series_id = (SELECT e.series_id 
                              FROM episodes e 
                              WHERE e.id = OLD.media_id)
        AND cs.season_number = (SELECT s.season_number
                              FROM seasons s
                              JOIN episodes e
                              ON e.season_number = s.season_number
                              AND e.series_id = s.series_id
                              WHERE e.id = OLD.media_id);
  RETURN OLD;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER ON_HISTORY_INSERT
AFTER INSERT ON history
FOR EACH ROW
EXECUTE PROCEDURE SET_COMPLETED_SEASON();

CREATE TRIGGER ON_HISTORY_DELETE
AFTER DELETE ON history
FOR EACH ROW
EXECUTE PROCEDURE DELETE_COMPLETED_SEASON();

CREATE OR REPLACE FUNCTION notify_trigger() 
RETURNS trigger AS $$ 
DECLARE 
BEGIN   
PERFORM pg_notify('watchers', 'series_id ' || NEW.series_id);   
RETURN new; 
END; $$ 
LANGUAGE plpgsql;

CREATE TRIGGER watched_table_trigger AFTER INSERT ON episodes
FOR EACH ROW EXECUTE PROCEDURE notify_trigger();

CREATE TABLE production_companies (
  id INTEGER PRIMARY KEY,
  name VARCHAR(255)
);

CREATE TABLE media (
  id INTEGER PRIMARY KEY,
  category VARCHAR(7) CHECK (category = 'movie' OR category = 'episode')
);

CREATE TABLE movies (
  id INTEGER PRIMARY KEY REFERENCES media(id),
  prod_company INTEGER REFERENCES production_companies(id),
  genre VARCHAR(255),
  is_mature BOOLEAN,
  title VARCHAR(255),
  release_year INTEGER
);

CREATE TABLE series (
  id INTEGER PRIMARY KEY,
  prod_company INTEGER REFERENCES production_companies(id),
  genre VARCHAR(255),
  is_mature BOOLEAN,
  season_count INTEGER,
  title VARCHAR(255)
);

CREATE TABLE seasons (
  series_id INTEGER REFERENCES series(id),
  season_number INTEGER,
  episode_count INTEGER,
  title VARCHAR(255),
  PRIMARY KEY (series_id, season_number)
);

CREATE TABLE episodes (
  id INTEGER PRIMARY KEY REFERENCES media(id),
  series_id INTEGER,
  season_number INTEGER,
  episode_number INTEGER,
  title VARCHAR(255),
  release_year INTEGER,
  FOREIGN KEY (series_id, season_number) REFERENCES seasons(series_id, season_number)
);

CREATE TABLE closed_captions (
  media_id INTEGER REFERENCES media(id),
  language VARCHAR(16),
  PRIMARY KEY (media_id, language)
);

CREATE TABLE audio_languages (
  media_id INTEGER REFERENCES media(id),
  language VARCHAR(16),
  PRIMARY KEY (media_id, language)
);

CREATE TABLE directors (
  name VARCHAR(255),
  media_id INTEGER REFERENCES media(id),
  PRIMARY KEY (name, media_id)
);

CREATE TABLE actors (
  name VARCHAR(255),
  acting_as VARCHAR(255),
  media_id INTEGER REFERENCES media(id),
  PRIMARY KEY (name, media_id)
);

CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  name VARCHAR(16) NOT NULL,
  email VARCHAR(255),
  number VARCHAR(30),
  birth_date DATE,
  creation_date DATE,
  expiration_date DATE,
  payment_status BOOLEAN,
  content_filtered BOOLEAN
);

CREATE TABLE children (
  parent_id INTEGER REFERENCES users(id),
  child_id INTEGER REFERENCES users(id),
  PRIMARY KEY (child_id, parent_id)
);

CREATE TABLE filters (
  user_id INTEGER REFERENCES users(id),
  filter VARCHAR(255) NOT NULL,
  category VARCHAR(255) NOT NULL,
  PRIMARY KEY (user_id, filter, category)
);

CREATE TABLE subscriptions (
  user_id INTEGER REFERENCES users(id),
  series_id INTEGER REFERENCES series(id),
  PRIMARY KEY (user_id, series_id)
);

CREATE TABLE history (
  user_id INTEGER REFERENCES users(id),
  media_id INTEGER REFERENCES media(id),
  date VARCHAR(10),
  PRIMARY KEY (user_id, media_id)
);

CREATE TABLE locale (
  user_id INTEGER REFERENCES users(id),
  media_id INTEGER REFERENCES media(id),
  cc_language VARCHAR(16),
  audio_language VARCHAR(16),
  PRIMARY KEY (user_id, media_id),
  FOREIGN KEY (media_id, cc_language) REFERENCES closed_captions(media_id, language),
  FOREIGN KEY (media_id, audio_language) REFERENCES audio_languages(media_id, language)
);

CREATE TABLE completed_seasons (
  user_id INTEGER REFERENCES users(id),
  series_id INTEGER,
  season_number INTEGER,
  FOREIGN KEY (series_id, season_number) REFERENCES seasons(series_id, season_number)
);

CREATE TABLE ratings (
  user_id INTEGER REFERENCES users(id),
  media_id INTEGER REFERENCES media(id),
  rating INTEGER CHECK (rating >= 0 AND rating <= 5),
  PRIMARY KEY (user_id, media_id)
);
